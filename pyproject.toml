[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "paas-ai"
version = "0.1.0"
description = "Agentic Platform as a Service Configuration Generator"
readme = "README.md"
license = "MIT"

keywords = ["paas", "ai", "agent", "kubernetes", "docker", "terraform", "configuration"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: System :: Systems Administration",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
packages = [{include = "paas_ai", from = "src"}]

[tool.poetry.urls]
Homepage = "https://github.com/paas-ai/paas-ai"
Documentation = "https://docs.paas-ai.dev"
Repository = "https://github.com/paas-ai/paas-ai.git"
Issues = "https://github.com/paas-ai/paas-ai/issues"

[tool.poetry.scripts]
paas-ai = "paas_ai.cli.main:main"

# Core dependencies (minimal for basic CLI functionality)
[tool.poetry.dependencies]
python = "^3.11,<3.13"

# CLI framework
click = "^8.1.7"
rich = "^13.7.0"
colorama = "^0.4.6"

# Configuration and serialization
pydantic = "^2.5.0"
PyYAML = "^6.0.1"

# File operations and utilities
python-dotenv = "^1.0.0"

# Date and time
python-dateutil = "^2.8.2"

# Type checking utilities
typing-extensions = "^4.8.0"

# RAG system dependencies group
langgraph-checkpoint-sqlite = "^2.0.11"
langgraph-checkpoint-postgres = "^2.0.23"
[tool.poetry.group.rag]
optional = true

[tool.poetry.group.rag.dependencies]
# Vector databases
chromadb = "^1.0.20"
qdrant-client = "^1.7.0"
pinecone-client = "^2.2.4"

# Embeddings and ML
openai = "^1.6.0"
tiktoken = "^0.7.0"
langchain-huggingface = "^0.3.1"

# Document processing
langchain = ">=0.3.0,<0.4.0"
langchain-community = ">=0.0.10,<0.4.0"
langchain-chroma = "^0.2.5"
beautifulsoup4 = "^4.12.2"
lxml = "^5.3.0"
pypdf = "^3.17.0"
python-docx = "^1.1.0"
python-pptx = "^0.6.23"

# Text processing
nltk = "^3.8.1"
rank-bm25 = "^0.2.2"
faiss-cpu = "^1.12.0"
unstructured = "^0.18.14"
markdown = "^3.9"

# Web scraping
selenium = "^4.15.0"
playwright = "^1.40.0"
requests-html = "^0.10.0"
crawl4ai = {git = "https://github.com/unclecode/crawl4ai.git"}

# Content extraction
trafilatura = "^1.6.3"
newspaper3k = "^0.2.8"

# Agent framework dependencies group
sentence-transformers = "^5.1.1"
torch = ">=2.7.0,<2.8.0"  # Pin to avoid meta tensor issues in 2.8.0+
[tool.poetry.group.agent]
optional = true

[tool.poetry.group.agent.dependencies]
langgraph = ">=0.6.0,<0.7.0"
langgraph-supervisor = "^0.0.29"
langgraph-swarm = "^0.0.14"
langchain = ">=0.3.0,<0.4.0"
langchain-openai = "^0.3.33"

# MCP (Model Context Protocol) dependencies group
[tool.poetry.group.mcp]
optional = true

[tool.poetry.group.mcp.dependencies]
# mcp = "^0.1.0"  # Commented out until available
websockets = "^12.0"


# API server dependencies group
[tool.poetry.group.api]
optional = true

[tool.poetry.group.api.dependencies]
fastapi = ">=0.115.0,<0.116.0"
uvicorn = "^0.24.0"
python-multipart = "^0.0.6"
jinja2 = "^3.1.2"

# Database dependencies group
[tool.poetry.group.database]
optional = true

[tool.poetry.group.database.dependencies]
sqlalchemy = "^2.0.23"
alembic = "^1.13.0"
asyncpg = "^0.29.0"
aiosqlite = ">=0.20.0,<1.0"

# External integrations group
[tool.poetry.group.integrations]
optional = true

[tool.poetry.group.integrations.dependencies]
atlassian-python-api = "^3.41.0"
pygithub = "^2.1.1"
kubernetes = "^28.1.0"
docker = "^6.1.3"
boto3 = "^1.34.0"
azure-identity = "^1.15.0"
google-cloud-storage = "^2.10.0"

# Development dependencies group
[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.2.0"
pytest-cov = "^4.1.0"

# Code quality
black = "^23.11.0"
isort = "^5.12.0"
mypy = "^1.7.0"

# Pre-commit hooks
pre-commit = "^3.6.0"

# Development scripts
pytest-asyncio = "^1.2.0"
jupyter = "^1.1.1"
ipykernel = "^6.30.1"
nbstripout = "^0.8.1"
[tool.poe.tasks]
test = "pytest"
test-unit = "pytest tests/unit -v"
test-integration = "pytest tests/integration -v"
test-rag = "pytest tests/unit/test_cli/test_commands/test_rag tests/unit/test_core/test_rag -v"
test-coverage = "pytest --cov=paas_ai --cov-report=html --cov-report=term"
test-fast = "pytest --no-cov -x"

# Black code formatting
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "qdrant_client.*", 
    "pinecone.*",
    "sentence_transformers.*",
    "rank_bm25.*",
    "atlassian.*",
    "langchain.*",
    "langgraph.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]
